{"version":3,"sources":["webpack:///../src/docs/docs/libraries.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,uBACA,gMAA+K,mBAAGC,WAAW,KAAQ,CACjM,KAAQ,2BADmK,gBAA/K,sOAIA,mQAAkP,mBAAGA,WAAW,KAAQ,CACpQ,KAAQ,kCADsO,cAAlP,KAGA,6FAA4E,mBAAGA,WAAW,KAAQ,CAC9F,KAAQ,oHADgE,oBAA5E,mKAGA,8BACE,iBAAGA,WAAW,cAAd,8HAEF,iBAAQ,CACN,GAAM,0BADR,0BAGA,4CAA2B,mBAAGA,WAAW,KAAQ,CAC7C,KAAQ,qCADe,2BAA3B,8RAGA,iBAAQ,CACN,GAAM,8BADR,8BAGA,2GACA,sBACE,kBAAIA,WAAW,MAAf,gCAAqD,mBAAGA,WAAW,MAAS,CACxE,KAAQ,qCADyC,mCAArD,yDAGA,kBAAIA,WAAW,MAAf,mFAAwG,0BAAYA,WAAW,MAAvB,gBAAxG,UACA,kBAAIA,WAAW,MAAf,4EACA,kBAAIA,WAAW,MAAf,gDAEF,oDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gDAIL,kHAAiG,mBAAGA,WAAW,KAAQ,CACnH,KAAQ,qCADqF,mCAAjG,qMAIA,qKACA,+SACA,8U,oMAMJJ,EAAWK,gBAAiB","file":"component---src-docs-docs-libraries-mdx-08b0f36ada218d1984b4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"libraries\"\n    }}>{`Libraries`}</h1>\n    <hr></hr>\n    <p>{`JavaScript program always contais specific libraries to solve the problem without copy-paste a problem solution between the projects. A lot of libraries are existed in `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/\"\n      }}>{`NPM Registry`}</a>{`. And to make program type safe we need to have some mechanism which will provide ability to annotate with types code which developer can't chane.\nIn order to handle this, Hegel supports the concept of a “library definition”.`}</p>\n    <p>{`We decided to not create our own \"library definition\" language, because we could face next propblem: creating of \"library definitions\" from scratch for all popular libraries. So, we decided to use popular \"library definition\" format - `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.typescriptlang.org\"\n      }}>{`TypeScript`}</a>{`.`}</p>\n    <p>{`More information about TypeScript library definition you can find at `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.typescriptlang.org/docs/handbook/declaration-files/deep-dive.html#definition-file-theory-a-deep-dive\"\n      }}>{`Definition Files`}</a>{`. There are only problems with: enums, modules, conditional types, because Hegel doesn't provde any additional and non-type safe concepts for type annotations.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Currently we are working for function type overloading which will help to make more warm relationships with \"d.ts\" files.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"definition-directories\"\n    }}>{`Definition Directories`}</h2>\n    <p>{`As was mentioned in `}<a parentName=\"p\" {...{\n        \"href\": \"/docz/docs/configuration#typings\"\n      }}>{`Configuration \"typings\"`}</a>{` section you may configure path for typings and can have multiple directories for typings. We decided that the better practive will be to \"store\" your third-party typings inside \"node_modules/@types\" directory and local typings inside \"@types\" directory (this behaivour is default).`}</p>\n    <h2 {...{\n      \"id\": \"definition-search-strategy\"\n    }}>{`Definition search strategy`}</h2>\n    <p>{`Hegel will try to find type definition for specific library by the next algorythm:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Search inside defined inside `}<a parentName=\"li\" {...{\n          \"href\": \"/docz/docs/configuration#typings\"\n        }}>{`\"typings\" configuration section`}</a>{` paths in the order which defined inside the section.`}</li>\n      <li parentName=\"ol\">{`Search for typing path which defined inside \"types\" section of specific package `}<inlineCode parentName=\"li\">{`package.json`}</inlineCode>{` file.`}</li>\n      <li parentName=\"ol\">{`Search for path of specific package with \"d.ts\" extension instead \".js\" `}</li>\n      <li parentName=\"ol\">{`Try to inference types of specific package.`}</li>\n    </ol>\n    <p>{`Lets explore it by example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import * as smthg from \"awesome-library\";\n`}</code></pre>\n    <p>{`First step is atempt to find \"awesome-library\" types definition inside defined paths from `}<a parentName=\"p\" {...{\n        \"href\": \"/docz/docs/configuration#typings\"\n      }}>{`\"typings\" configuration section`}</a>{` (by default \"@types\" and \"node_modules/@types\")\nIf \"awesome-library.d.ts\" file exist inside \"@types\" or \"node_modules/@types\" directories algorythm will be stoped and return found definition.`}</p>\n    <p>{`Otherwise, Hegel will try to resolve definition which can be defined in \"types\" section of \"node_modules/awesome-library/package.json\" file.`}</p>\n    <p>{`If it doesn't exist, Hegel will try to find file by resolved \"awesome-library\" path. Lets imagine that this path is \"node_modules/awesome-library/index.js\". So, Hegel will try to read \"node_modules/awesome-library.d.ts\" file and will return the typings if the file are existed.`}</p>\n    <p>{`Otherwise, Hegel will try to inference types of the module by himself without any type definitions.\nNote, if Hegel will inferencing a module and this module will contain type errors, Hegel will notify you about module problems and you will need to define the typings manualy inside local \"@types\" directory.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}